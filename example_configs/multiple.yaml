# Note for this multiple tab example, I just copied the familiar elements of a typical windowed application.
# Needless to say, it is a little unlikely a Python shell program will have these particular choices.
# I was just looking for something familiar and not tied down to one particular use case.
case_sensitive: False  # optional, boolean, default False
screen_width: 80  # optional, integer, default 80
tabs:
  - tab_header_input: fi  # this is the input that will change to this header; two letters so it doesn't conflict with Edit tab's find;
    tab_header_description: File  # this key is optional, or it can be None. It is displayed next to the tab_header_input
    tab_header_long_description: Changing to File tab  # this key is optional, or it can be set to None.
                                                       # it is displayed only when changing tabs 
    items:
      - item_choice_displayed: o  # an element to be put within square brackets to the left of every choice/item line
                                  # note that it does not necessarily have to correspond at all to item_inputs, although
                                  # it probably should
        item_description: Open  # displayed to the right of item_choice_displayed
        item_inputs:  # not displayed, a list of all inputs that will trigger the return of this item's 'item_returns'
          - o
        item_returns: open
      - item_choice_displayed: w,c  # note I put a comma here for clarity, but this field is not parsed, I could have put 
                                    # anything eg "wc", "w|c", "w or c", "double-u or cee", "fizzbin", etc.
        item_description: Close
        item_inputs: 
          - w
          - C  # purposely simulating it "accidentally" capitalized; because case sensitive = False, it will make no difference.
        item_returns: close
      - item_choice_displayed: s
        item_description: Save
        item_inputs: 
          - s
        item_returns: save
      - item_choice_displayed: sa
        item_description: Save As
        item_inputs: 
          - sa  # Note this requires the user to give a TWO-letter response, not just one, in contrast to the
                # items above it
        item_returns: save_as  # At this point, the outer scope calling this module would presumably have to ask for
                               # more information via input() or other means, e.g. a new file name and/or path
      - item_choice_displayed: p
        item_description: Preferences
        item_inputs: 
          - p
        item_returns: preferences
      - item_choice_displayed: q
        item_description: Quit
        item_inputs: 
          - q
          - x  # note that the last two choices were not specified in item_choice_displayed, that's perfectly all right
          - quit 
        item_returns: quit
  - tab_header_input: e
    tab_header_description: Edit
    tab_header_long_description: You have just selected the edit menu
    items:
      - item_choice_displayed: z
        item_description: Undo
        item_inputs: 
          - z  
        item_returns: undo
      - item_choice_displayed: y
        item_description: Redo
        item_inputs: 
          - y
        item_returns: redo
      - item_choice_displayed: x
        item_description: Cut
        item_inputs: 
          - x
        item_returns: cut
      - item_choice_displayed: c
        item_description: Copy
        item_inputs: 
          - C  
        item_returns: copy
      - item_choice_displayed: v
        item_description: Paste
        item_inputs: 
          - v
        item_returns: paste
      - item_choice_displayed: f
        item_description: Find
        item_inputs: 
          - f
        item_returns: find
      - item_choice_displayed: g
        item_description: Find again
        item_inputs: 
          - g
        item_returns: find_again
      - item_choice_displayed: r
        item_description: Replace
        item_inputs: 
          - r
        item_returns: replace
  - tab_header_input: vw  # Two letters so it doesn't conflict with edit's "v"/paste
    tab_header_description: View
    items:
      - item_choice_displayed: cat
        item_description: cat
        item_inputs: 
          - cat  # Note that this takes a THREE-character entry
        item_returns: cat
      - item_choice_displayed: head
        item_description: head
        item_inputs: 
          - head  # four characters
        item_returns: head
      - item_choice_displayed: tail
        item_description: tail
        item_inputs: 
          - tail
        item_returns: tail
  - tab_header_input: h
    tab_header_description: Help
    items:
      - item_choice_displayed: d
        item_description: Documentation
        item_inputs: 
          - d
        item_returns: docs
      - item_choice_displayed: a
        item_description: About
        item_inputs: 
          - a
        item_returns: about
  - tab_header_input: 0  # I just tacked this on at the end; since this is an input, it will be converted to a string
                         # by the package's normalizer
    tab_header_description: Integers
    items:
      - item_choice_displayed: 1
        item_description: 'Choice #1'  # needs to be wrapped in quotes or the '#' will be interpreted as a comment
        item_inputs: 
          - 1  # will be changed to string, because it's an input
        item_returns: 1  # will be changed to string, because it's an output
      - item_choice_displayed: 2
        item_description: 2
        item_inputs: 
          - 2
        item_returns: 2
      - item_choice_displayed: 3
        item_description: 'Choice #3'
        item_inputs: 
          - 3
        item_returns: 3
